{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","list","localStorage","getItem","console","log","JSON","parse","getLocalItems","setTodos","setItem","stringify","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9e9e3ad.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\n// //  get localstorage\r\n// const getLocalItems = () => {\r\n//     let list = localStorage.getItem('lists') ;\r\n//     console.log(list);\r\n\r\n//     if (list ) {\r\n//         return JSON.parse(localStorage.getItem('lists'));\r\n//     } else {\r\n//         return [];\r\n//     }\r\n\r\n// }\r\n\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n    const inputRef = useRef(null);\r\n    // localStorage.setItem('value', input);\r\n    // localStorage.getItem('',);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n\r\n\r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input\r\n        });\r\n\r\n        setInput('');\r\n    };\r\n\r\n    // // Add data to localStorage\r\n    // useEffect (() => {\r\n    //     localStorage.setItem('lists', JSON.stringify(input))\r\n    // }, [input]);\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Update your item'\r\n                        value={input}\r\n                        name='text'\r\n                        className='todo-input edit'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    \r\n                    <button className='todo-button edit '> Update </button>\r\n                </>\r\n            ) :\r\n\r\n\r\n                (\r\n                    <>\r\n\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Add a todo'\r\n                            value={input}\r\n                            name='text'\r\n                            className='todo-input'\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button className='todo-button'> Add todo </button>\r\n                    </>\r\n                )}\r\n\r\n\r\n\r\n\r\n     \r\n{/* \r\n<div className='logo' >  <p>  Shashank Singhal\r\n&copy; 2021           </p>\r\n    \r\n</div> */}\r\n\r\n        </form>\r\n\r\n        \r\n\r\n    );\r\n};\r\n\r\n\r\nexport default TodoForm;\r\n","import React, {useState} from 'react'\r\nimport {RiCloseCircleLine} from 'react-icons/ri';\r\nimport {TiEdit} from 'react-icons/ti';\r\nimport TodoForm from './TodoForm';\r\n\r\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null, \r\n        value: ''\r\n\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value:''\r\n        });\r\n    };\r\n     if (edit.id ){\r\n         return <TodoForm edit={edit} \r\n         onSubmit={submitUpdate} />;\r\n     }\r\n\r\n return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n        key={index} \r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className=\"icons\">\r\n                <RiCloseCircleLine\r\n                onClick={() => removeTodo(todo.id)}\r\n                className='delete-icon'\r\n                />\r\n                <TiEdit  onClick={() => setEdit({id: todo.id, value: todo.text})}\r\n              className='edit-icon'\r\n              />\r\n            </div>\r\n        </div>\r\n    ));\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\n\r\n\r\n//  get localstorage\r\nconst getLocalItems = () => {\r\n    let list = localStorage.getItem('lists') ;\r\n    console.log(list);\r\n\r\n    if (list ) {\r\n        return JSON.parse(localStorage.getItem('lists'));\r\n    } else {\r\n        return [];\r\n    }\r\n\r\n}\r\n\r\nfunction TodoList() {\r\n    const [ todos, setTodos ] = useState(getLocalItems());\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return;\r\n        }\r\n        const newTodos = [todo, ...todos];\r\n\r\n        setTodos(newTodos);\r\n        console.log(todo, ...todos);\r\n    };\r\n\r\n    const updateTodo = (todoId, newValue) => {\r\n        if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\r\n        );\r\n    };\r\n\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id);\r\n        setTodos(removeArr);\r\n    };\r\n\r\n    const completeTodo = id => {\r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete;\r\n            }\r\n            return todo;\r\n        });\r\n\r\n        setTodos(updatedTodos);\r\n    };\r\n    // Add data to localStorage\r\n    useEffect (() => {\r\n        localStorage.setItem('lists', JSON.stringify(todos))\r\n    }, [todos]);\r\n\r\n    return (\r\n        <div>\r\n            <h1>What's the Plan for Today?</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos}\r\n                completeTodo={completeTodo}\r\n                removeTodo={removeTodo}\r\n                updateTodo={updateTodo}\r\n                 />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\n\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      \n      <TodoList />\n      \n  <h5>\n Shashank Singhal  &copy; 2021        \n   </h5>\n    </div>\n    \n  );\n  \n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}